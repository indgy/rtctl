#!/bin/sh

# rtctl - Utility to simplify remote host management
#
# Ian Grindley <ian@dijix.com>
#
# https://github.com/dijitaltrix/rtctl

# This script is run on the source machine and carries out
# tasks on the remote host via a Secure Shell
# Requires SSH keys and that the remote user has root access
# Usage:
# rtctl [host] [task] [params]

# TODO create hosts file and loop through hosts calling commands
# TODO create config file

# setup this folder with the required
init()
{
    echo "Setting up folders"
    local folders="configs tasks templates"
    for f in $folders
    do
        if [ ! -d $f ]; then
            mkdir $f
        fi
    done
    if [ ! -f hosts ]; then
        createHostsFile
    fi
    if [ ! -f hosts ]; then
        createConfigFile
    fi
    _createHostsFile
    _createConfigFile
}
# create an empty task template for the user to modify
create()
{
    echo "Creating task $2";
    if [ ! -d tasks ]; then
        echo "No tasks folder, create one or use rtctl init"
        exit;
    fi
    if [ -f "tasks/$2" ]; then
        echo "The task '$2' has already been created"
        exit;
    fi
    touch "tasks/$2"
    echo "# Generated by rtctl
# Task: $2
# Created: `date`
# Author: `echo $USER`

# You should add something below to help anyone who finds themselves stuck, one day it may be you..
usage=""
# Required variables separated by space
required=""
# Optional variables, separated by space
optional=""

doTask()
{
    echo \$1
}
" >> "tasks/$2"
    chmod 0755 "tasks/$2"
}
_createHostsFile()
{
    touch hosts
    echo "# rtctl hosts
# Enter the names of the hosts you want to run tasks on, one per line
# e.g.
# www.example.com
" > hosts

}
_createConfigFile()
{
    touch config
    echo "# rtctl config
# Enter your configuration variables, one per line
# These variables will populate your templates automatically
# e.g.
# var=\"your value\"
# save a log of this task on the remote system
log_remote=false
# ssh options (see man ssh)
ssh_port=22
ssh_user=
ssh_jump_host=
# show the results of the task on this system
verbose=false

" > hosts

}
# call a user task
_doUserTask()
{
    #TODO handle errors gracefully
    if [ ! -f "tasks/$2" ]; then
        echo "Cannot find task '$2' in tasks folder, to create it try this - ";
        echo "rtctl create $2\n"
        exit;
    fi
    # include user task file
    . tasks/$2
    # send the correct parameters to user function [host] [args]
    # save host
    local host=$1
    # remove host and task name
    shift 2
    # call included task run() function
    result=`doTask $host $@`
    if [ $? ]; then
        echo "OK";
    else
        echo "FAILED!"
    fi
}
# call an internal task (included in this file)
_doInternalTask()
{
    local host=$1
    local function=$2

    result=`$function $host`
    if [ $? ]; then
        echo "\n\033[1;32m Task '$function' completed OK \033[0m\n"
    else
        echo "\n\033[1;31m Task '$function' FAILED \033[0m\n"
    fi

    if [ $verbose == true ]; then
        echo "\033[0;34m $result \033[0m\n\n"
    fi
}
# parse arguments
_parseArgs()
{
    echo "Parsing args"
}

#
#  useful task functions
#

# connect to remote host and grab some unique information
ping()
{
    ssh $1 uname -mnv
}
# execute a raw command on the remote system, always as root
raw()
{
    local host=$1
    shift
    ssh $host doas $@
}

#
#   library functions
#

# check that $1 is a callable function
functionExists()
{
    type $1 2>/dev/null | grep -q 'function';
}
# check the line exists in the file
isLineInFile()
{
    if [ ! -f $2 ]; then
        echo "Cannot find file '$2'";
        exit;
    fi
    grep $1 $2
}
# check user is root
isRoot()
{
    if [ `whoami` <> "root" ]; then
        echo "This script must be run as root";
        #exit;
    fi
}
# merge variables into file
mergeVarsIntoFile()
{
    # https://unix.stackexchange.com/questions/294835
    local vars=$1
    local file=$2

    out=$( . $vars && eval "echo \"$(cat ${file})\"")
    echo "${out}"   # quotes keep formatting
}
# check string starts with substring
strStartsWith()
{
    ${1:0:1} == $2
}
# user add
userAdd()
{
    # add login user if not exists
    id $user > /dev/null
    if [ $? == 0 ]; then
        echo "Found login user $user"
    else
        echo "Creating login user ${user}"
        # pw useradd -m -n $user -s /bin/tcsh -d /home/$user -G wheel -L default
        # passwd $user
    fi
}
# check user exists on system
userExists()
{
    id $user > /dev/null
}

# set variable defaults (see config for comments)
log_remote=false
verbose=false

# check for and set flags

# call built in function or call user task
type $2 &>/dev/null && _doInternalTask $@ || _doUserTask $@

# if function_exists $1; then
#         echo $1 exists;
# else
#         echo "Cannot find $1";
# fi
